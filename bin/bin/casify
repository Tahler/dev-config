#!/usr/bin/env python

import argparse
import os
import stringcase

DEFAULT_PARENT_DIR = '.'

def to_case(orig_str, casing):
    if casing == 'upper':
        return stringcase.uppercase(orig_str)
    elif casing == 'lower':
        return stringcase.lowercase(orig_str)
    elif casing == 'title':
        return stringcase.titlecase(orig_str)
    elif casing == 'capital':
        return stringcase.capitalcase(orig_str)
    elif casing == 'pascal':
        return stringcase.pascalcase(orig_str)
    elif casing == 'camel':
        return stringcase.camelcase(orig_str)
    elif casing == 'kebab':
        return stringcase.spinalcase(orig_str)
    elif casing == 'snake':
        return stringcase.snakecase(orig_str)
    elif casing == 'upper-snake':
        return stringcase.constcase(orig_str)
    else:
        return orig_str


def print_dry_run(parent, file, casing, depth=0):
    root, ext = os.path.splitext(file)
    new_file = to_case(root, casing) + ext
    print('\t' * depth, file, '=>', new_file)

    full_path = os.path.join(parent, file)
    if os.path.isdir(full_path):
        for sub_file in os.listdir(full_path):
            print_dry_run(full_path, sub_file, casing, depth + 1)


def rename(parent, file, casing):
    root, ext = os.path.splitext(file)
    new_file = to_case(root, casing) + ext
    full_path = os.path.join(parent, file)
    full_new_path = os.path.join(parent, new_file)
    os.rename(full_path, full_new_path)
    if os.path.isdir(full_path):
        for sub_file in os.listdir(full_path):
            rename(full_new_path, sub_file, casing)


def confirm(prompt, default_confirm=None):
    """default_confirm can be True, False, or None"""

    if default_confirm is None:
        options = '[y/n]'
    elif default_confirm:
        options = '[Y/n]'
    else:
        options = '[y/N]'

    answer = None
    while answer is None:
        full_prompt = '{} {} '.format(prompt, options)
        choice = input(full_prompt).lower().strip()
        if default_confirm is not None and choice == '':
            answer = default_confirm
        elif choice == 'y':
            answer = True
        else:
            answer = False
    return answer


def confirm_rename(path, casing):
    """Performs a dry run, confirms, then proceeds"""
    parent = os.path.dirname(path)
    basename = os.path.basename(path)
    print_dry_run(parent, basename, casing)
    print()

    if confirm('Proceed with the changes?', False):
        rename(parent, basename, casing)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description='Rename files to a certain casing')
    parser.add_argument(
            'casing',
            type=str,
            choices=['upper', 'lower', 'title', 'capital',
                     'pascal', 'camel', 'kebab', 'snake', 'upper-snake'],
            help='the string casing to convert the path to')
    parser.add_argument(
            'path',
            default=DEFAULT_PARENT_DIR,
            nargs='?',
            type=str,
            help=('the file to be renamed. if path is a directory, all '
                  'sub-items of that directory will be renamed.'))
    args = parser.parse_args()
    confirm_rename(args.path, args.casing)
