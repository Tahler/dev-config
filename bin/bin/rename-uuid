#!/usr/bin/env python

import argparse
import os
import uuid

import rename

DEFAULT_PARENT_DIR = '.'
UUID_HEX_LEN = 32

def rename_files(
        parent_dir = DEFAULT_PARENT_DIR, 
        name_len = UUID_HEX_LEN, 
        rename_dirs=False):
    """Renames all files in the directory in the parent_dir with UUIDv4s hex
    values trimmed to name_len."""

    renames = []

    files = os.listdir(parent_dir)
    for f in files:
        if rename_dirs or os.path.isfile(f):
            new_root = uuid.uuid4().hex[:name_len]
            curr_root, ext = os.path.splitext(f)
            new_name = new_root + ext
            renames.append(rename.Task(f, new_name))

    rename.rename(renames)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description='Rename files in a directory with truncated UUIDs.')
    parser.add_argument(
            'parent_dir',
            default=DEFAULT_PARENT_DIR,
            nargs='?',
            type=str,
            help='the directory containing the files to be renamed')
    parser.add_argument(
            '-l', '--name_len',
            default=UUID_HEX_LEN,
            nargs='?',
            type=int,
            help=('the length of the truncated UUID which becomes the filename '
                  '(must be less than 32)'))
    parser.add_argument(
            '-d', '--include_dirs',
            action='store_true',
            help='if present, also rename directories')
    args = parser.parse_args()
    rename_files(args.parent_dir, args.name_len, args.include_dirs)
